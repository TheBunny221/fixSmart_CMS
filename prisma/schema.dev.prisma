// Development Prisma schema file for SQLite
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Models (enums are replaced with strings for SQLite compatibility)
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  fullName    String
  phoneNumber String?
  password    String?
  role        String   @default("CITIZEN") // String instead of UserRole enum
  wardId      String?
  department  String?
  language    String   @default("en")
  avatar      String?
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  joinedOn    DateTime @default(now())

  // Relations
  ward              Ward?              @relation(fields: [wardId], references: [id])
  submittedComplaints Complaint[]      @relation("SubmittedBy")
  assignedComplaints  Complaint[]      @relation("AssignedTo")
  wardOfficerComplaints Complaint[]    @relation("WardOfficer")
  maintenanceTeamComplaints Complaint[] @relation("MaintenanceTeam")
  submittedServiceRequests ServiceRequest[] @relation("ServiceSubmittedBy")
  assignedServiceRequests  ServiceRequest[] @relation("ServiceAssignedTo")
  statusLogs        StatusLog[]
  serviceStatusLogs ServiceRequestStatusLog[]
  notifications     Notification[]
  sentMessages      Message[]          @relation("SentBy")
  receivedMessages  Message[]          @relation("ReceivedBy")
  otpSessions       OTPSession[]
  addedMaterials    Material[]
  uploadedPhotos    ComplaintPhoto[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Ward {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  isActive    Boolean @default(true)

  // Relations
  users       User[]
  complaints  Complaint[]
  serviceRequests ServiceRequest[]
  subZones    SubZone[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("wards")
}

model SubZone {
  id          String  @id @default(cuid())
  name        String
  wardId      String
  description String?
  isActive    Boolean @default(true)
  
  // Relations
  ward        Ward        @relation(fields: [wardId], references: [id], onDelete: Cascade)
  complaints  Complaint[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("sub_zones")
}

model Complaint {
  id              String            @id @default(cuid())
  complaintId     String?           @unique  // Human-readable complaint ID like KSC0001
  title           String?
  description     String
  type            String            // String instead of enum
  status          String            @default("REGISTERED") // String instead of enum
  priority        String            @default("MEDIUM") // String instead of enum
  slaStatus       String            @default("ON_TIME") // String instead of enum
  
  // Location Information
  wardId          String
  subZoneId       String?
  area            String
  landmark        String?
  address         String?
  coordinates     String?           // JSON string for lat/lng
  latitude        Float?            // Explicit latitude field
  longitude       Float?            // Explicit longitude field
  
  // Contact Information
  contactName     String?
  contactEmail    String?
  contactPhone    String
  isAnonymous     Boolean           @default(false)
  
  // Assignment and Tracking
  submittedById   String?
  assignedToId    String?           // Generic assignment field (kept for backward compatibility)
  resolvedById    String?
  wardOfficerId   String?           // Automatically assigned ward officer
  maintenanceTeamId String?         // Assigned maintenance team member
  assignToTeam    Boolean           @default(false) // Track if needs assignment to maintenance team (legacy)
  
  // Timestamps
  submittedOn     DateTime          @default(now())
  assignedOn      DateTime?
  resolvedOn      DateTime?
  closedOn        DateTime?
  deadline        DateTime?
  
  // Additional Information
  remarks         String?
  citizenFeedback String?
  rating          Int?              // 1-5 rating
  tags            String?           // JSON array of tags
  
  // Relations
  ward            Ward              @relation(fields: [wardId], references: [id])
  subZone         SubZone?          @relation(fields: [subZoneId], references: [id])
  submittedBy     User?             @relation("SubmittedBy", fields: [submittedById], references: [id])
  assignedTo      User?             @relation("AssignedTo", fields: [assignedToId], references: [id])
  wardOfficer     User?             @relation("WardOfficer", fields: [wardOfficerId], references: [id])
  maintenanceTeam User?             @relation("MaintenanceTeam", fields: [maintenanceTeamId], references: [id])
  statusLogs      StatusLog[]
  attachments     Attachment[]
  notifications   Notification[]
  messages        Message[]
  materials       Material[]
  photos          ComplaintPhoto[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for performance (SQLite supports simple indexes)
  @@index([wardId, status])
  @@index([assignedToId, status])
  @@index([maintenanceTeamId, status])
  @@index([submittedOn])

  @@map("complaints")
}

model StatusLog {
  id          String   @id @default(cuid())
  complaintId String
  userId      String
  fromStatus  String?  // Previous status
  toStatus    String   // New status
  comment     String?
  timestamp   DateTime @default(now())
  
  // Relations
  complaint   Complaint       @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id])

  @@map("status_logs")
}

model Attachment {
  id          String    @id @default(cuid())
  complaintId String
  fileName    String
  originalName String
  mimeType    String
  size        Int
  url         String
  uploadedAt  DateTime  @default(now())
  
  // Relations
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  
  @@map("attachments")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  complaintId String?
  serviceRequestId String?
  type        String   // String instead of enum
  title       String
  message     String
  isRead      Boolean  @default(false)
  sentAt      DateTime @default(now())
  readAt      DateTime?

  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  complaint   Complaint?       @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  serviceRequest ServiceRequest? @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Message {
  id          String    @id @default(cuid())
  complaintId String
  sentById    String
  receivedById String?
  content     String
  isInternal  Boolean   @default(true)  // Internal communication between officers
  sentAt      DateTime  @default(now())
  readAt      DateTime?
  
  // Relations
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  sentBy      User      @relation("SentBy", fields: [sentById], references: [id])
  receivedBy  User?     @relation("ReceivedBy", fields: [receivedById], references: [id])
  
  @@map("messages")
}

model OTPSession {
  id          String    @id @default(cuid())
  userId      String?
  email       String
  phoneNumber String?
  otpCode     String
  purpose     String    @default("GUEST_VERIFICATION") // GUEST_VERIFICATION, PASSWORD_RESET, etc.
  isVerified  Boolean   @default(false)
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  verifiedAt  DateTime?
  
  // Relations
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_sessions")
}

model Department {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  headUserId  String?
  isActive    Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("departments")
}

model SystemConfig {
  id          String    @id @default(cuid())
  key         String    @unique
  value       String
  type        String?   // Type to categorize the setting (e.g., 'app', 'complaint', 'contact', 'system')
  description String?
  isActive    Boolean   @default(true)
  updatedAt   DateTime  @updatedAt

  @@map("system_config")
}

model ServiceRequest {
  id              String    @id @default(cuid())
  title           String?
  serviceType     String    // Service type identifier
  description     String
  status          String    @default("SUBMITTED") // String instead of enum
  priority        String    @default("NORMAL") // String instead of enum

  // Location Information
  wardId          String
  area            String
  address         String
  landmark        String?

  // Contact Information
  contactName     String
  contactEmail    String
  contactPhone    String

  // Assignment and Tracking
  submittedById   String?
  assignedToId    String?

  // Timestamps
  submittedOn     DateTime  @default(now())
  preferredDateTime DateTime?
  assignedOn      DateTime?
  expectedCompletion DateTime?
  completedOn     DateTime?

  // Additional Information
  remarks         String?
  citizenFeedback String?
  rating          Int?      // 1-5 rating

  // Relations
  ward            Ward      @relation(fields: [wardId], references: [id])
  submittedBy     User?     @relation("ServiceSubmittedBy", fields: [submittedById], references: [id])
  assignedTo      User?     @relation("ServiceAssignedTo", fields: [assignedToId], references: [id])
  statusLogs      ServiceRequestStatusLog[]
  notifications   Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("service_requests")
}

model ServiceRequestStatusLog {
  id              String        @id @default(cuid())
  serviceRequestId String
  userId          String
  fromStatus      String?       // Previous status
  toStatus        String        // New status
  comment         String?
  timestamp       DateTime      @default(now())

  // Relations
  serviceRequest  ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id])

  @@map("service_request_status_logs")
}

model Report {
  id          String   @id @default(cuid())
  name        String
  type        String   // COMPLAINT_SUMMARY, SLA_COMPLIANCE, PERFORMANCE, etc.
  filters     String   // JSON string of applied filters
  data        String   // JSON string of report data
  generatedBy String
  generatedAt DateTime @default(now())

  @@map("reports")
}

model Material {
  id          String    @id @default(cuid())
  complaintId String
  materialName String
  quantity    Int
  unit        String    // e.g., kg, meter, piece
  usedAt      DateTime  @default(now())
  addedById   String    // maintenance team member who added this
  notes       String?

  // Relations
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  addedBy     User      @relation(fields: [addedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("materials")
}

model ComplaintPhoto {
  id              String   @id @default(cuid())
  complaintId     String
  uploadedByTeamId String  // maintenance team member who uploaded this
  photoUrl        String
  fileName        String
  originalName    String
  mimeType        String
  size            Int
  uploadedAt      DateTime @default(now())
  description     String?  // optional description of what the photo shows

  // Relations
  complaint       Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  uploadedByTeam  User      @relation(fields: [uploadedByTeamId], references: [id])

  @@map("complaint_photos")
}
