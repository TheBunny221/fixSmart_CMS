// Production Prisma schema file for PostgreSQL
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for PostgreSQL production deployment
enum UserRole {
  CITIZEN
  WARD_OFFICER
  MAINTENANCE_TEAM
  ADMINISTRATOR
  GUEST
}

enum ComplaintStatus {
  REGISTERED
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  CLOSED
  REOPENED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SLAStatus {
  ON_TIME
  WARNING
  OVERDUE
  COMPLETED
}

enum ServiceRequestStatus {
  SUBMITTED
  VERIFIED
  PROCESSING
  APPROVED
  REJECTED
  COMPLETED
}

enum NotificationType {
  EMAIL
  SMS
  IN_APP
}

// Models
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  fullName    String
  phoneNumber String?
  password    String?
  role        UserRole @default(CITIZEN)
  wardId      String?
  department  String?
  language    String   @default("en")
  avatar      String?
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  joinedOn    DateTime @default(now())

  // Relations
  ward              Ward?              @relation(fields: [wardId], references: [id])
  submittedComplaints Complaint[]      @relation("SubmittedBy")
  assignedComplaints  Complaint[]      @relation("AssignedTo")
  wardOfficerComplaints Complaint[]    @relation("WardOfficerAssigned")
  maintenanceTeamComplaints Complaint[] @relation("MaintenanceTeamAssigned")
  submittedServiceRequests ServiceRequest[] @relation("ServiceSubmittedBy")
  assignedServiceRequests  ServiceRequest[] @relation("ServiceAssignedTo")
  statusLogs        StatusLog[]
  serviceStatusLogs ServiceRequestStatusLog[]
  notifications     Notification[]
  sentMessages      Message[]          @relation("SentBy")
  receivedMessages  Message[]          @relation("ReceivedBy")
  otpSessions       OTPSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role, isActive])
  @@index([wardId])
  @@map("users")
}

model Ward {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  isActive    Boolean @default(true)

  // Relations
  users       User[]
  complaints  Complaint[]
  serviceRequests ServiceRequest[]
  subZones    SubZone[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("wards")
}

model SubZone {
  id          String  @id @default(cuid())
  name        String
  wardId      String
  description String?
  isActive    Boolean @default(true)
  
  // Relations
  ward        Ward        @relation(fields: [wardId], references: [id], onDelete: Cascade)
  complaints  Complaint[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([wardId])
  @@map("sub_zones")
}

model Complaint {
  id              String            @id @default(cuid())
  complaintId     String?           @unique  // Human-readable complaint ID like KSC0001
  title           String?
  description     String
  type            String
  status          ComplaintStatus   @default(REGISTERED)
  priority        Priority          @default(MEDIUM)
  slaStatus       SLAStatus         @default(ON_TIME)
  
  // Location Information
  wardId          String
  subZoneId       String?
  area            String
  landmark        String?
  address         String?
  coordinates     String?           // JSON string for lat/lng
  
  // Contact Information
  contactName     String?
  contactEmail    String?
  contactPhone    String
  isAnonymous     Boolean           @default(false)
  
  // Assignment and Tracking
  submittedById   String?
  assignedToId    String?
  wardOfficerId   String?           // Specific ward officer assignment
  maintenanceTeamId String?         // Specific maintenance team member assignment
  resolvedById    String?
  
  // Timestamps
  submittedOn     DateTime          @default(now())
  assignedOn      DateTime?
  resolvedOn      DateTime?
  closedOn        DateTime?
  deadline        DateTime?
  
  // Additional Information
  remarks         String?
  citizenFeedback String?
  rating          Int?              // 1-5 rating
  tags            String?           // JSON array of tags
  
  // Relations
  ward            Ward              @relation(fields: [wardId], references: [id])
  subZone         SubZone?          @relation(fields: [subZoneId], references: [id])
  submittedBy     User?             @relation("SubmittedBy", fields: [submittedById], references: [id])
  assignedTo      User?             @relation("AssignedTo", fields: [assignedToId], references: [id])
  wardOfficer     User?             @relation("WardOfficerAssigned", fields: [wardOfficerId], references: [id])
  maintenanceTeam User?             @relation("MaintenanceTeamAssigned", fields: [maintenanceTeamId], references: [id])
  statusLogs      StatusLog[]
  attachments     Attachment[]
  notifications   Notification[]
  messages        Message[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for performance
  @@index([submittedById, createdAt])
  @@index([wardId, status])
  @@index([assignedToId, status])
  @@index([wardOfficerId, status])
  @@index([maintenanceTeamId, status])
  @@index([type, status])
  @@index([priority, status])
  @@index([submittedOn])
  @@index([status, createdAt])
  @@index([type, createdAt])
  @@map("complaints")
}

model StatusLog {
  id          String   @id @default(cuid())
  complaintId String
  userId      String
  fromStatus  String?  // Previous status
  toStatus    String   // New status
  comment     String?
  timestamp   DateTime @default(now())
  
  // Relations
  complaint   Complaint       @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id])

  @@index([complaintId, timestamp])
  @@index([userId])
  @@map("status_logs")
}

model Attachment {
  id          String    @id @default(cuid())
  complaintId String
  fileName    String
  originalName String
  mimeType    String
  size        Int
  url         String
  uploadedAt  DateTime  @default(now())
  
  // Relations
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  
  @@index([complaintId])
  @@map("attachments")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  complaintId String?
  serviceRequestId String?
  type        NotificationType
  title       String
  message     String
  isRead      Boolean  @default(false)
  sentAt      DateTime @default(now())
  readAt      DateTime?

  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  complaint   Complaint?       @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  serviceRequest ServiceRequest? @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([complaintId])
  @@index([serviceRequestId])
  @@map("notifications")
}

model Message {
  id          String    @id @default(cuid())
  complaintId String
  sentById    String
  receivedById String?
  content     String
  isInternal  Boolean   @default(true)  // Internal communication between officers
  sentAt      DateTime  @default(now())
  readAt      DateTime?
  
  // Relations
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  sentBy      User      @relation("SentBy", fields: [sentById], references: [id])
  receivedBy  User?     @relation("ReceivedBy", fields: [receivedById], references: [id])
  
  @@index([complaintId])
  @@index([sentById])
  @@map("messages")
}

model OTPSession {
  id          String    @id @default(cuid())
  userId      String?
  email       String
  phoneNumber String?
  otpCode     String
  purpose     String    @default("GUEST_VERIFICATION") // GUEST_VERIFICATION, PASSWORD_RESET, etc.
  isVerified  Boolean   @default(false)
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  verifiedAt  DateTime?
  
  // Relations
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, purpose, isVerified])
  @@index([expiresAt])
  @@index([userId])
  @@map("otp_sessions")
}

model Department {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  headUserId  String?
  isActive    Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("departments")
}

model SystemConfig {
  id          String    @id @default(cuid())
  key         String    @unique
  value       String
  description String?
  isActive    Boolean   @default(true)
  updatedAt   DateTime  @updatedAt
  
  @@index([key, isActive])
  @@map("system_config")
}

model ServiceRequest {
  id              String    @id @default(cuid())
  title           String?
  serviceType     String    // Service type identifier
  description     String
  status          ServiceRequestStatus @default(SUBMITTED)
  priority        Priority  @default(MEDIUM)

  // Location Information
  wardId          String
  area            String
  address         String
  landmark        String?

  // Contact Information
  contactName     String
  contactEmail    String
  contactPhone    String

  // Assignment and Tracking
  submittedById   String?
  assignedToId    String?

  // Timestamps
  submittedOn     DateTime  @default(now())
  preferredDateTime DateTime?
  assignedOn      DateTime?
  expectedCompletion DateTime?
  completedOn     DateTime?

  // Additional Information
  remarks         String?
  citizenFeedback String?
  rating          Int?      // 1-5 rating

  // Relations
  ward            Ward      @relation(fields: [wardId], references: [id])
  submittedBy     User?     @relation("ServiceSubmittedBy", fields: [submittedById], references: [id])
  assignedTo      User?     @relation("ServiceAssignedTo", fields: [assignedToId], references: [id])
  statusLogs      ServiceRequestStatusLog[]
  notifications   Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for performance
  @@index([submittedById, createdAt])
  @@index([wardId, status])
  @@index([assignedToId, status])
  @@index([serviceType, status])
  @@index([submittedOn])
  @@map("service_requests")
}

model ServiceRequestStatusLog {
  id              String        @id @default(cuid())
  serviceRequestId String
  userId          String
  fromStatus      String?       // Previous status
  toStatus        String        // New status
  comment         String?
  timestamp       DateTime      @default(now())

  // Relations
  serviceRequest  ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id])

  @@index([serviceRequestId, timestamp])
  @@index([userId])
  @@map("service_request_status_logs")
}

model Report {
  id          String   @id @default(cuid())
  name        String
  type        String   // COMPLAINT_SUMMARY, SLA_COMPLIANCE, PERFORMANCE, etc.
  filters     String   // JSON string of applied filters
  data        String   // JSON string of report data
  generatedBy String
  generatedAt DateTime @default(now())

  @@index([type, generatedAt])
  @@index([generatedBy])
  @@map("reports")
}
